#!/usr/bin/env sh
# This file is part of reproducible-macports. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/reproducible-macports/master/COPYRIGHT. No part of reproducible-macports, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2019 The developers of reproducible-macports. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/reproducible-macports/master/COPYRIGHT.


set -e
set -u
set -f

program_name="reproducible-port-list"

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

fail()
{
	local exitCode="$1"
	local message="$2"
	
	printf '%s:FAIL:%s\n' "$program_name" "$message" 1>&2
	exit $exitCode
}

depends()
{
	local binary
	for binary in "$@"
	do
		if ! command -v "$binary" 1>/dev/null 2>/dev/null; then
			local EX_OSFILE=72
			fail $EX_OSFILE "The binary `$binary` is not on the PATH"
		fi
	done
}

reproducible_port_list_uninstallLeaves()
{
	set +e
		./reproducible-port uninstall --follow-dependencies --follow-dependents inactive 2>/dev/null
		
		local exitCode=1
		while [ $exitCode -eq 0 ]
		do
			./reproducible-port uninstall --follow-dependencies --follow-dependents leaves 2>/dev/null
			exitCode=$?
		done
	set -e
}

depends diff tail cat rm cp
reproducible_port_list_update()
{
	local userPortsListFilePath="$(pwd)"/reproducible-macports.conf/PortList
	local cachedPortsListFilePath="$reproducible_macports_prefixFolderPath"/.PortList
	
	if [ -f "$userPortsListFilePath" ]; then
		if [ -r "$userPortsListFilePath" ]; then
			if [ -f "$cachedPortsListFilePath" ]; then
				if [ -r "$cachedPortsListFilePath" ]; then
					if diff -q "$userPortsListFilePath" "$cachedPortsListFilePath" 1>/dev/null; then
						return 0
					fi
				fi
			fi
		fi
	fi

	local portName
	if [ -f "$cachedPortsListFilePath" ]; then
		if [ -r "$cachedPortsListFilePath" ]; then
			# NOTE: macos sed adds a trailing line, so input does not need to end with a line feed.
			tail -r "$cachedPortsListFilePath" | tr -d '[:blank:]' | sed -e '/^#/d' -e '/^$/d' | while IFS= read -r portName
			do
				./reproducible-port uninstall --follow-dependencies --follow-dependents "$portName"
				./reproducible-port clean --archive --logs --work "$portName"
			done
		fi
	fi
	rm -rf "$cachedPortsListFilePath"
	
	# NOTE: macos sed adds a trailing line, so input does not need to end with a line feed.
	if [ -f "$userPortsListFilePath" ]; then
		if [ -r "$userPortsListFilePath" ]; then
			cat "$userPortsListFilePath" | tr -d '[:blank:]' | sed -e '/^#/d' -e '/^$/d' | while IFS= read -r portName
			do
				./reproducible-port clean --archive --logs --work "$portName"
				./reproducible-port install "$portName"
			done
			cp "$userPortsListFilePath" "$cachedPortsListFilePath"
		fi
	fi
	
	reproducible_port_list_uninstallLeaves
}

depends uname
reproducible_port_list_main()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
	
	local functions="$(pwd)"/functions
	. "$functions"/environment.functions
	
	if [ "$(uname)" != 'Darwin' ]; then
		return 0
	fi
	
	. "$functions"/macos.functions

	reproducible_macports_setVariables
	
	reproducible_port_list_update
}

reproducible_port_list_main "$@"
