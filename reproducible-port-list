#!/usr/bin/env sh
# This file is part of reproducible-macports. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/reproducible-macports/master/COPYRIGHT. No part of reproducible-macports, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2019 The developers of reproducible-macports. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/reproducible-macports/master/COPYRIGHT.


set -e
set -u
set -f

program_name="reproducible-port-list"

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

fail()
{
	local exitCode="$1"
	local message="$2"
	
	printf '%s:FAIL:%s\n' "$program_name" "$message" 1>&2
	exit $exitCode
}

depends()
{
	local binary
	for binary in "$@"
	do
		if ! command -v "$binary" 1>/dev/null 2>/dev/null; then
			local EX_OSFILE=72
			fail $EX_OSFILE "The binary `$binary` is not on the PATH"
		fi
	done
}

depends dirname mkdir
reproducible_port_list_createMissingPortList()
{
	local filePath="$1"
	
	local parentFolderPath="$(dirname "$filePath")"
	mkdir -m 0700 -p "$parentFolderPath"
	
	if [ ! -e "$filePath" ]; then
		printf '' >"$filePath"
	fi
}

depends sed
reproducible_port_list_simplifyPortList()
{
	local originalPortListFilePath="$1"
	local simplifiedPortListFilePath="$2"
	
	# NOTE: macos sed adds a trailing line, so `read -r` will work even if the final line does not end with a line feed.
	sed -e 's/[[:space:]]+/ /g' -e 's/^ //g' -e 's/ $//g' -e '/^$/d' -e '/^#/d' "$originalPortListFilePath" >"$simplifiedPortListFilePath"
}

depends tail sed awk
reproducible_port_list_installed()
{
	installedVersionRevision="$reproducible_macports_logsFolderPath"/installed-version-revision
	./reproducible-port installed | tail -n +2 | sed -e 's/^  //g' -e 's/ @/ /g' | awk '$3="(active)" {split($2,a,"+"); split(a[1],b,"_"); print $1,b[1],b[2]}' >"$installedVersionRevision"
	
	installed="$reproducible_macports_logsFolderPath"/installed	
	awk '{print $1}' "$installedVersionRevision" >"$installed"
}

depends rm
reproducible_port_list_removeBuildsAndLogsAndIncoming()
{
	set +f
		rm -rf "$reproducible_macports_prefixFolderPath"/var/macports/build/*
		rm -rf "$reproducible_macports_prefixFolderPath"/var/macports/log/*
		rm -rf "$reproducible_macports_prefixFolderPath"/var/macports/incoming
	set -f
}

depends rm openssl
reproducible_port_list_signExistingArchives()
{
	local archiveFile
	local archiveFileSignature
	set +f
	for archiveFile in "$(pwd)"/reproducible-macports.conf/software/*/*.tbz2
	do
		set -f
		if [ ! -e "$archiveFile" ]; then
			continue
		fi
		local archiveFileSignature="$archiveFile".rmd160
		rm -rf "$archiveFileSignature"
		openssl dgst -ripemd160 -sign "$(pwd)"/source/local-package-signing-key/local-package-signing-key.private.pem -out "$archiveFileSignature" "$archiveFile"
	done
	set +f
}

depends mkdir ln basename
reproducible_port_list_trustExistingArchives()
{
	local verified="$reproducible_macports_prefixFolderPath"/var/macports/incoming/verified
	
	mkdir -m 0700 -p "$reproducible_macports_prefixFolderPath"/var/macports/incoming/verified
	local file
	set +f
	for file in "$(pwd)"/reproducible-macports.conf/software/*/*.tbz2
	do
		ln -s "$file" "$verified"/"$(basename "$file")"
	done
}

reproducible_port_list_uninstallInactivePorts()
{
	set +e
		./reproducible-port -q -N uninstall --follow-dependencies --follow-dependents inactive 2>/dev/null
	set -e
}

reproducible_port_list_uninstallAndCleanAllPorts()
{
	while IFS=' ' read -r portName
	do
		set -- ./reproducible-port
		if _port_requires_root "$portName"; then
			set -- sudo -p "Please enter the password for the user '%s' to modify the port '$portName' using root permissions: " "$@"
		fi
	
		"$@" uninstall --follow-dependencies --follow-dependents "$portName"
	done <"$installed"
}

depends sudo
reproducible_port_list_installNewPortList()
{
	_install_but_allow_IFS_to_be_different_to_expand_variants()
	{
		local IFS=' '
		"$@" install "$portName" $variants
	}

	while IFS=' ' read -r portName variants
	do
		set -- ./reproducible-port -q -N
		if _port_requires_root "$portName"; then
			set -- sudo -p "Please enter the password for the user '%s' to modify the port '$portName' using root permissions: " "$@"
		fi
	
		_install_but_allow_IFS_to_be_different_to_expand_variants "$@"
		"$@" clean --archive "$portName"
	done <"$userSimplified"
}

depends grep rm
reproducible_port_list_removeUnusedDistfilesAndSoftware()
{
	local installedVersionRevision
	local installed
	reproducible_port_list_installed
	
	_reproducible_port_list_removeUnusedDistfilesAndSoftware_forFolderName()
	{
		local portName
		cd "$(pwd)"/reproducible-macports.conf/distfiles 1>/dev/null 2>/dev/null
	
			set +f
				for portName in "$(pwd)"/reproducible-macports.conf/"$folderName"/*
				do
					set -f
		
					if [ ! -e "$portName" ]; then
						continue
					fi
		
					case "$portName" in
						.*)
							continue
						;;
					esac
		
					if ! grep -q '^'"$portName"'$' "$installed"; then
						rm -rf "$portName"
						continue
					fi
		
				done
			set -f
		
		cd - 1>/dev/null 2>/dev/null
	}
	
	_reproducible_port_list_removeUnusedDistfilesAndSoftware_removeInactiveDistfiles()
	{
		local portName
		local version
		local revision
		while IFS=' ' read -r portName version revision
		do
			ls -1 "$(pwd)"/reproducible-macports.conf/distfiles | while IFS='' read -r file
			do
				case "$file" in

					*"$version"*)
						:
					;;
				
					*)
						rm -rf "$file"
					;;
					
				esac
			done
		done <"$installedVersionRevision"
	}
	
	_reproducible_port_list_removeUnusedDistfilesAndSoftware_removeInactiveSoftware()
	{
		local portName
		local version
		local revision
		while IFS=' ' read -r portName version revision
		do
			ls -1 "$(pwd)"/reproducible-macports.conf/software | while IFS='' read -r file
			do
				case "$file" in

					"$portName"-"$version"_"$revision".*.tbz2)
						:
					;;
				
					*)
						rm -rf "$file"
					;;
					
				esac
			done
		done <"$installedVersionRevision"
	}
	
	local folderName
	for folderName in distfiles software
	do
		_reproducible_port_list_removeUnusedDistfilesAndSoftware_forFolderName
	done
	
	_reproducible_port_list_removeUnusedDistfilesAndSoftware_removeInactiveDistfiles
	
	_reproducible_port_list_removeUnusedDistfilesAndSoftware_removeInactiveSoftware	
}

depends diff cp id grep
reproducible_port_list_update()
{
	local userPortsListFilePath="$(pwd)"/reproducible-macports.conf/PortList
	reproducible_port_list_createMissingPortList "$userPortsListFilePath"
	
	local cachedPortsListFilePath="$reproducible_macports_prefixFolderPath"/.PortList
	reproducible_port_list_createMissingPortList "$cachedPortsListFilePath"

	if diff -q "$userPortsListFilePath" "$cachedPortsListFilePath" 1>/dev/null; then
		return 0
	fi
	
	local userSimplified="$reproducible_macports_logsFolderPath"/user
	reproducible_port_list_simplifyPortList "$userPortsListFilePath" "$userSimplified"
	
	local cachedSimplified="$reproducible_macports_logsFolderPath"/cached
	reproducible_port_list_simplifyPortList "$cachedPortsListFilePath" "$cachedSimplified"
	
	if diff -q "$userSimplified" "$cachedSimplified" 1>/dev/null; then
		cp -f "$userPortsListFilePath" "$cachedPortsListFilePath"
		return 0
	fi
	
	local portName
	local variants
	
	./reproducible-port index
	export REPRODUCIBLE_PORT_NO_INDEX=true
	
	reproducible_port_list_removeBuildsAndLogsAndIncoming
	
	reproducible_port_list_uninstallInactivePorts

	local installedVersionRevision
	local installed
	reproducible_port_list_installed
	
	local isNotRunningAsRoot=true
	if [ "$(id -u)" -eq 0 ]; then
		isNotRunningAsRoot=false
	fi
	_port_requires_root()
	{
		if grep -q "^${portName}$" "$(pwd)"/reproducible-macports.conf/ports-requiring-root; then
			if $isNotRunningAsRoot; then
				return 0
			fi
		fi
		return 1
	}
	
	reproducible_port_list_uninstallAndCleanAllPorts
	
	reproducible_port_list_signExistingArchives
	reproducible_port_list_trustExistingArchives
	
	reproducible_port_list_installNewPortList
	
	reproducible_port_list_removeUnusedDistfilesAndSoftware
	
	# TODO: Remove leaves, as these are only used for builds?
	
	reproducible_port_list_removeBuildsAndLogsAndIncoming
	
	cp "$userPortsListFilePath" "$cachedPortsListFilePath"
}

depends uname
reproducible_port_list_main()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
	
	local functions="$(pwd)"/functions
	. "$functions"/environment.functions
	
	if [ "$(uname)" != 'Darwin' ]; then
		return 0
	fi
	
	. "$functions"/macos.functions

	reproducible_macports_setVariables
	
	reproducible_macports_cleanLogsFolder
	
	reproducible_port_list_update
}

reproducible_port_list_main "$@"
